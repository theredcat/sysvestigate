{
  "name": "bresenham",
  "version": "0.0.3",
  "description": "Bresenham's line algorithm",
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec -r should test/**/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:madbence/node-bresenham.git"
  },
  "keywords": [
    "line",
    "bresenham",
    "math"
  ],
  "author": {
    "name": "Bence DÃ¡nyi",
    "email": "madbence@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/madbence/node-bresenham/issues"
  },
  "homepage": "https://github.com/madbence/node-bresenham",
  "devDependencies": {
    "should": "^3.3.1",
    "mocha": "^1.18.2"
  },
  "readme": "# node-bresenham [![Build Status](https://travis-ci.org/madbence/node-bresenham.svg?branch=master)](https://travis-ci.org/madbence/node-bresenham)\n\n[Bresenham's line algorithm](http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm)\nin node. ES6 generators are supported! \\o/\n\n## Install\n\n```\n$ npm install bresenham\n```\n\n## API\n\n#### bresenham(x0, y0, x1, y1[, fn])\n\nCalls `fn` with points between `(x0, y0)` and `(x1, y1)`.\nThe points have integer coordinates.\n\nIf `fn` is omitted, an array of points is returned.\n\nThe algorithm uses no floating point arithmetics,\nso it's considered to be fast. But JS numbers are not\nintegers, so I'm not sure whether this is a faster\napproach than the naive algorithm or not.\n\n## ES6 API\n\nIf you `require('bresenham/generator')`, you can use the generator API.\n\n#### bresenham(x0, y0, x1, y1)\n\nCreates a generator that yields every point between `(x0, y0)` and `(x1, y1)`.\n\n```js\nvar line = bresenham(1, 2, 3, 4);\ndo {\n  var point = line.next().value;\n  // do something\n} while(point);\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "bresenham@0.0.3",
  "_shasum": "abdab9e5b194e27c757cd314d8444314f299877a",
  "_from": "bresenham@0.0.3",
  "_resolved": "https://registry.npmjs.org/bresenham/-/bresenham-0.0.3.tgz"
}
